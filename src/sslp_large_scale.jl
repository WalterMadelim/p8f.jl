const m=30; 
const n=70; 
const scenes=50;
const c = [54., 40, 53, 73, 77, 77, 50, 50, 73, 73, 80, 58, 67, 79, 71, 46, 43, 42, 42, 63, 79, 43, 51, 41, 41, 42, 56, 50, 65, 77]
const d = [19. 5 17 5 16 17 2 8 16 6 15 9 9 11 25 12 11 8 21 11 13 9 7 15 5 15 9 1 2 14; 24 22 16 10 8 1 11 3 17 10 3 11 19 11 14 21 14 2 12 5 9 10 4 5 17 14 8 7 0 24; 18 0 18 8 23 5 25 3 16 24 10 22 12 1 15 10 5 23 5 1 17 9 7 22 25 24 1 1 22 12; 7 17 20 1 4 11 7 13 22 17 14 16 10 4 14 18 2 9 13 4 13 8 19 5 3 13 6 19 9 2; 14 3 22 22 1 19 17 5 4 1 22 10 15 10 13 15 4 20 20 18 3 20 5 11 10 15 7 25 15 1; 0 25 18 25 17 25 24 8 6 22 11 15 7 12 12 7 25 0 9 6 23 23 6 7 9 0 0 10 9 20; 1 18 5 16 16 16 7 12 25 21 15 17 2 20 11 12 20 13 9 6 18 22 12 18 15 24 10 21 22 22; 12 13 10 5 18 0 10 0 11 17 9 10 0 24 3 0 24 19 21 11 3 11 7 20 1 2 6 9 23 23; 16 11 19 4 4 7 24 12 23 9 24 14 8 16 7 9 20 25 4 16 24 16 4 9 17 0 17 11 15 1; 12 13 22 3 16 19 4 20 23 8 16 19 18 12 25 4 25 23 13 20 12 8 24 18 24 25 20 9 16 13; 23 23 13 8 23 10 2 7 19 4 20 5 15 12 0 10 3 20 15 2 11 15 17 23 7 20 17 14 5 5; 17 18 20 18 16 24 13 1 25 1 15 15 5 21 7 11 13 1 7 15 5 18 3 9 14 16 22 16 1 13; 20 0 23 12 22 5 5 22 8 0 13 22 21 18 12 11 6 0 25 9 13 2 5 3 13 10 1 11 9 6; 14 9 1 17 4 4 4 19 3 25 8 7 3 1 20 4 18 15 25 4 13 5 11 18 16 8 5 8 22 3; 5 1 1 20 11 14 14 9 21 15 5 6 0 5 6 8 12 11 9 17 4 1 14 14 15 8 13 21 9 10; 24 9 1 24 25 0 1 13 3 9 5 9 12 0 21 13 12 20 2 10 5 22 11 14 24 24 2 1 11 25; 3 4 9 2 8 13 17 24 4 10 15 19 11 12 10 0 9 9 18 6 18 25 25 3 17 1 15 3 10 21; 15 4 16 1 8 25 16 20 9 19 20 9 9 1 1 18 13 18 22 17 6 0 15 16 7 19 24 16 24 19; 12 5 23 21 21 5 9 2 8 20 25 5 7 20 1 0 7 13 13 7 12 5 23 5 15 13 21 23 12 5; 18 16 18 17 11 12 4 23 24 5 5 8 11 1 14 1 25 12 25 17 11 18 5 14 10 12 5 7 1 23; 1 15 18 9 17 25 6 2 19 16 14 5 15 13 7 7 24 17 6 7 2 4 6 5 2 8 15 25 3 17; 19 9 8 5 18 25 1 4 0 18 18 22 12 8 9 24 17 1 19 15 15 2 13 13 5 22 4 18 23 15; 6 18 2 12 6 10 22 2 10 15 24 11 17 23 7 4 0 12 12 10 19 23 9 25 13 23 10 8 11 20; 9 12 5 15 18 15 13 7 1 24 22 11 15 10 21 12 2 18 23 2 4 16 2 18 10 17 2 15 5 14; 16 8 1 18 3 3 4 17 13 1 7 3 20 20 0 4 16 11 19 17 1 18 12 9 9 10 22 6 22 9; 17 24 24 20 11 11 0 21 5 8 5 13 0 3 10 19 8 5 18 7 5 7 23 14 15 0 2 9 23 10; 25 6 18 3 11 25 19 10 12 17 8 14 1 3 13 15 23 14 0 9 23 19 14 18 8 18 1 2 24 10; 11 4 17 20 11 20 12 18 6 12 18 20 16 5 14 8 2 2 2 18 9 23 22 16 2 2 10 6 14 16; 4 19 20 3 24 17 15 4 25 3 7 1 20 18 25 10 8 20 22 10 7 10 7 25 24 9 23 7 13 0; 9 22 12 16 22 17 11 9 20 17 21 23 22 21 1 18 6 12 6 23 22 13 18 1 8 2 25 7 12 5; 14 1 22 10 14 13 10 3 15 25 12 15 1 13 3 25 7 9 4 13 23 13 4 5 9 17 7 20 10 13; 1 24 16 15 12 19 2 16 6 5 25 23 1 7 11 1 19 5 15 3 6 23 8 9 2 12 10 7 19 1; 19 23 6 3 15 25 17 11 15 13 4 10 12 12 9 23 9 6 8 0 5 1 15 25 2 14 9 22 11 22; 9 1 7 16 20 19 5 16 24 11 2 9 25 18 9 12 17 21 23 8 20 25 12 25 10 14 2 14 22 3; 22 5 22 15 5 0 18 24 19 24 11 21 11 21 20 4 6 5 8 8 7 6 23 20 19 23 21 15 14 18; 1 16 3 5 10 3 21 8 5 18 3 11 9 5 5 4 17 16 25 25 10 0 21 14 5 25 7 8 7 24; 25 23 2 14 18 11 23 5 4 20 22 14 1 3 21 20 22 13 23 0 24 15 1 15 24 5 14 22 1 22; 12 5 9 22 22 19 21 14 19 3 19 19 24 18 8 20 1 11 24 7 11 18 15 21 11 11 4 6 22 13; 16 12 13 13 10 25 1 18 14 9 11 8 9 24 2 5 19 25 2 0 20 20 20 13 0 5 3 19 25 25; 8 3 11 1 20 7 2 0 7 1 11 6 10 3 13 15 8 20 10 6 25 8 12 14 13 12 1 19 3 9; 15 21 7 2 2 4 5 21 19 1 10 22 18 18 17 19 13 11 20 5 7 12 16 4 25 9 15 1 13 25; 12 13 11 3 17 19 13 25 22 13 6 11 6 13 6 20 17 20 5 3 12 11 19 7 2 22 13 10 23 21; 2 16 7 2 16 11 0 16 14 13 19 21 17 0 23 0 7 1 5 18 15 13 12 20 8 22 17 18 21 12; 8 14 21 14 5 10 25 25 1 20 10 11 17 2 14 11 18 7 11 16 18 17 3 23 11 10 15 4 25 13; 25 0 18 14 16 21 25 1 23 2 15 16 9 0 1 4 23 4 14 23 20 14 12 16 22 8 18 1 13 4; 22 25 22 5 20 3 1 16 18 1 13 13 19 6 17 14 4 8 4 20 20 14 21 10 3 16 17 4 18 24; 15 14 14 20 12 21 22 22 17 19 20 0 19 0 21 24 18 1 23 18 13 8 20 8 17 16 4 11 25 18; 0 4 18 7 24 22 0 4 14 23 10 7 12 0 5 22 24 18 17 10 5 12 13 21 4 4 20 5 21 2; 14 18 0 3 3 8 11 5 3 9 13 9 1 5 21 23 5 21 5 21 2 11 14 12 19 12 4 15 5 17; 7 22 14 0 3 0 13 19 15 25 21 13 22 20 10 19 1 17 10 5 17 11 23 21 13 18 19 6 20 22; 24 19 2 19 21 22 7 13 1 0 21 13 6 15 12 20 1 7 14 21 21 5 21 19 6 11 14 8 25 0; 15 5 11 2 21 20 5 16 19 14 4 17 9 13 15 14 25 16 11 9 21 15 24 4 16 2 7 1 19 3; 14 7 19 3 1 5 8 0 17 12 24 6 0 3 13 22 19 25 15 14 0 0 6 7 13 23 19 4 23 25; 16 19 3 20 1 7 23 4 18 21 15 24 9 12 9 24 7 24 10 7 18 3 5 13 16 24 20 7 24 13; 3 12 12 12 6 19 20 3 0 25 17 24 7 13 7 7 19 3 21 18 10 20 16 16 4 6 25 1 17 12; 1 15 3 6 4 21 13 6 22 3 9 18 0 19 17 25 14 0 6 2 23 10 21 10 8 24 11 2 4 1; 2 7 19 13 24 14 25 20 15 0 11 15 1 14 12 1 24 21 25 13 4 10 3 0 8 14 17 3 15 1; 7 16 24 6 20 10 15 21 4 15 12 21 7 4 1 24 9 11 23 21 0 2 12 23 7 2 11 12 16 9; 17 6 1 13 25 2 8 14 23 4 4 8 16 22 15 16 10 10 16 9 18 15 7 4 5 6 1 13 4 3; 19 4 5 12 3 3 8 22 17 18 12 13 9 23 17 13 11 8 21 24 24 1 7 15 21 22 16 22 11 15; 7 24 24 0 16 18 4 13 15 9 11 8 15 19 17 25 5 12 2 18 22 9 13 0 7 6 18 9 16 21; 13 23 23 7 20 4 25 4 0 18 13 25 4 1 23 4 4 18 8 15 15 5 3 17 23 20 25 10 2 0; 2 3 17 15 6 2 19 1 0 18 23 5 23 8 0 18 9 2 23 4 4 7 0 3 9 19 18 17 8 20; 15 21 14 1 9 2 3 24 13 15 13 5 20 9 13 4 25 7 4 5 9 15 9 17 18 7 11 25 16 23; 25 3 15 1 2 6 4 16 24 6 12 15 25 18 16 18 8 21 0 12 23 10 15 13 25 6 6 23 4 16; 15 24 13 5 17 14 24 11 8 24 0 15 4 5 13 11 22 2 6 24 14 17 10 21 2 14 19 22 15 7; 22 12 1 1 3 24 10 0 20 2 7 11 3 13 18 13 1 13 5 17 19 25 17 8 22 13 12 11 19 11; 8 0 6 7 0 3 17 17 0 12 0 13 18 3 25 17 23 6 24 9 14 16 5 1 20 12 1 16 18 15; 3 4 24 20 1 7 18 25 3 2 16 8 9 2 22 25 4 21 4 20 1 9 22 21 1 18 18 20 2 0; 6 24 14 24 10 13 10 5 16 0 10 3 16 9 0 21 17 4 22 13 5 11 19 15 8 5 22 13 6 25]
const q0 = fill(1e3,m)
const u = 1291.15
const h = [0. 0 0 1 1 1 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 0; 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 0 0 1 0 0; 1 1 0 0 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0; 0 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 1 0 1; 1 0 0 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 1 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 1 1; 0 0 1 1 1 0 0 1 1 1 0 1 0 1 1 0 0 1 0 0 1 1 1 1 0 0 0 1 0 1 0 1 1 1 1 0 1 1 0 1 0 1 1 0 0 0 1 1 0 1; 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0; 0 1 1 1 0 0 0 0 0 1 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 1 1 1 0 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0; 0 1 1 1 1 1 0 1 0 0 0 0 1 1 0 1 1 0 1 1 0 0 1 0 1 0 0 0 1 0 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 0 0; 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1; 1 0 0 1 1 1 1 0 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1; 1 1 1 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 0 1 0; 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 0 1 1 0 1 1 1 0 1 1 0 0 0 0 1 0 0 1; 1 0 0 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 0 0 0 0 1 1 0; 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0; 1 0 1 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 1; 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1; 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 0 0 0 1; 1 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0; 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1 0 1 1 0 0 0 1 1 0 1 1 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1; 0 0 0 1 1 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 1 1 0 0 0 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 1 0 0 0 0; 0 0 0 1 0 0 0 0 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0; 0 0 0 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0; 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 0; 0 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 1 1 1 1 1 1 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 1 0 1 1 0 0 1 0 0 1 1 1 0 1 1 0 0 0; 0 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1; 0 1 1 0 0 0 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0; 1 1 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 1 1 1 0 1 0 0 1 0 1 0; 0 1 1 0 0 0 1 0 0 0 0 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 0 1 1; 0 1 1 0 0 1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 1 1 0 0 0 1 1 1 0; 1 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 0 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 1 1 0 0 0 1 1 0; 0 0 1 1 0 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1 1 0 0 0 0 0; 0 1 1 1 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 0 1 0; 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 1 0 0; 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0; 0 1 1 0 1 1 0 0 0 1 1 1 0 1 0 1 1 1 0 0 0 1 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 0 1 0 1 1 1 0 0 0 1 1 1 0; 0 0 0 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1 1 1 0 1 0 0 0 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 1 0 1 1 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 0 1 1 0 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 1 1 0 0 1; 1 1 1 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 1 1 0 0 1 1 1 0 1 1 0 1 1 0 0 1 0 0 0 1 1 1 0 0 1 1 0 0 1 1 1 0; 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 0 1; 1 0 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 1 1 0 1 1; 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 0 0 0 1 1 1 1 1 0; 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 0 0; 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 1 1 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 1; 0 1 0 1 1 0 0 1 1 0 0 0 1 0 1 0 0 0 1 1 1 1 1 0 0 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1; 1 1 1 0 1 1 0 0 0 1 1 1 0 0 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 1 0 1 1 1 1 0 1 0; 1 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 0 0 0 1 1 1 1 0 1 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1; 0 1 1 0 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 0 1; 1 1 0 0 0 1 1 1 1 0 1 1 0 0 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 1 1 0 1 0 1; 0 1 1 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1; 1 1 0 1 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0 0 1 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 1 0 0 1 1 1 0 1 1 1; 1 1 1 1 1 0 0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0; 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0; 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 1 1 1 1; 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 1 1; 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1 1 0; 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 0 0; 1 1 0 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 0 1; 1 1 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 1 0 1 0 0 1 1; 1 1 1 1 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 1 1 0 0; 0 0 1 0 1 1 1 0 1 1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 0 1]
const p = fill(0.02,scenes)

import MathOptInterface as MOI
import Gurobi

function terms_init(l)
    return [MOI.ScalarAffineTerm(0.,MOI.VariableIndex(0)) for _ in 1:l]
end

o = Gurobi.Optimizer()
objterms = terms_init(m+scenes*(m+n*m));
x = similar(c,MOI.VariableIndex);
for j in 1:m
    x[j] = MOI.add_variable(o)
    MOI.add_constraint(o, x[j], MOI.ZeroOne())
    objterms[j] = MOI.ScalarAffineTerm(c[j],x[j])
end

y0 = [similar(q0,MOI.VariableIndex) for _ in 1:scenes];
for s_ind in 1:scenes
    for j in 1:m
        y0[s_ind][j] = MOI.add_variable(o)
        MOI.add_constraint(o,y0[s_ind][j],MOI.GreaterThan(0.))
        objterms[m + (s_ind-1) * m + j] = MOI.ScalarAffineTerm(p[s_ind] * q0[j],y0[s_ind][j])
    end
end

y = [similar(d,MOI.VariableIndex) for _ in 1:scenes];
baseInd = m+m*scenes;
for s_ind in 1:scenes
    for i in 1:n
        terms = terms_init(m) # constr 2
        for j in 1:m
            y[s_ind][i,j] = MOI.add_variable(o);
            MOI.add_constraint(o,y[s_ind][i,j],MOI.ZeroOne())
            objterms[baseInd + n*m*(s_ind-1) + m*(i-1) + j] = MOI.ScalarAffineTerm(-p[s_ind] * d[i,j],y[s_ind][i,j])
            terms[j] = MOI.ScalarAffineTerm(1.,y[s_ind][i,j]) # constr 2
        end
        f = MOI.ScalarAffineFunction(terms, 0.)
        MOI.add_constraint(o,f,MOI.EqualTo(h[i,s_ind])) # constr 2
    end 
end

for s_ind in 1:scenes
    for j in 1:m
        tmp = terms_init(n+2)
        for i in 1:n
            tmp[i] = MOI.ScalarAffineTerm(d[i,j],y[s_ind][i,j])
        end
        tmp[n+1] = MOI.ScalarAffineTerm(-1.,y0[s_ind][j])
        tmp[n+2] = MOI.ScalarAffineTerm(-u,x[j])
        f = MOI.ScalarAffineFunction(tmp, 0.)
        MOI.add_constraint(o,f,MOI.LessThan(0.)) # constr 1
    end
end

# obj function and SENSE
f = MOI.ScalarAffineFunction(objterms, 0.);
type_matters = MOI.ObjectiveFunction{typeof(f)}()
MOI.set(o,type_matters,f)
type_matters = MOI.ObjectiveSense()
MOI.set(o, type_matters, MOI.MIN_SENSE)

MOI.optimize!(o)



julia> MOI.optimize!(o)
Gurobi Optimizer version 10.0.2 build v10.0.2rc0 (win64)

CPU model: 11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 4 physical cores, 8 logical processors, using up to 8 threads

Optimize a model with 5000 rows, 106530 columns and 209100 nonzeros
Model fingerprint: 0x289bcfad
Variable types: 1500 continuous, 105030 integer (105030 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+03]
  Objective range  [2e-02, 8e+01]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Found heuristic solution: objective 159800.04000
Presolve removed 1752 rows and 54541 columns
Presolve time: 0.16s
Presolved: 3248 rows, 51989 columns, 103918 nonzeros
Variable types: 0 continuous, 51989 integer (50489 binary)
Deterministic concurrent LP optimizer: primal and dual simplex
Showing first log only...

Concurrent spin time: 0.04s

Solved with dual simplex

Root relaxation: objective -7.485040e+02, 8019 iterations, 1.17 seconds (1.27 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0 -748.50404    0 1893 159800.040 -748.50404   100%     -    1s
H    0     0                     254.7600000 -748.50404   394%     -    1s
H    0     0                     201.7600000 -748.50404   471%     -    1s
H    0     0                     126.1800000 -748.50404   693%     -    1s
H    0     0                     -65.9000000 -723.94264   999%     -    4s
H    0     0                    -129.1000000 -723.94264   461%     -    4s
H    0     0                    -170.8600000 -723.94264   324%     -    4s
     0     0 -723.94264    0 3042 -170.86000 -723.94264   324%     -    4s
     0     0 -710.96341    0 3743 -170.86000 -710.96341   316%     -    7s
     0     0 -708.09016    0 3694 -170.86000 -708.09016   314%     -    9s
     0     0 -707.69657    0 3759 -170.86000 -707.69657   314%     -   10s
     0     0 -707.60572    0 3761 -170.86000 -707.60572   314%     -   10s
     0     0 -707.60456    0 3780 -170.86000 -707.60456   314%     -   10s
H    0     0                    -235.3400000 -695.61178   196%     -   14s
     0     0 -695.61178    0 4775 -235.34000 -695.61178   196%     -   15s
H    0     0                    -296.5200000 -683.21492   130%     -   22s
     0     0 -683.21492    0 5244 -296.52000 -683.21492   130%     -   22s
H    0     0                    -335.1400000 -674.41177   101%     -   30s
H    0     0                    -443.1600000 -674.41177  52.2%     -   30s
     0     0 -674.41177    0 5948 -443.16000 -674.41177  52.2%     -   30s
     0     0 -670.18173    0 5837 -443.16000 -670.18173  51.2%     -   38s
H    0     0                    -513.5000000 -668.72530  30.2%     -   44s
H    0     0                    -527.6800000 -668.72530  26.7%     -   44s
     0     0 -668.72530    0 6057 -527.68000 -668.72530  26.7%     -   44s
     0     0 -668.27861    0 6044 -527.68000 -668.27861  26.6%     -   47s
     0     0 -668.13023    0 6062 -527.68000 -668.13023  26.6%     -   48s
     0     0 -668.10879    0 6092 -527.68000 -668.10879  26.6%     -   49s
     0     0 -657.20714    0 6696 -527.68000 -657.20714  24.5%     -   61s
H    0     0                    -561.1800000 -657.20714  17.1%     -   61s
     0     0 -649.75722    0 7314 -561.18000 -649.75722  15.8%     -   74s
     0     0 -646.48963    0 7945 -561.18000 -646.48963  15.2%     -   86s
     0     0 -644.63702    0 8245 -561.18000 -644.63702  14.9%     -   96s
     0     0 -643.92870    0 8294 -561.18000 -643.92870  14.7%     -  105s
     0     0 -643.65074    0 8467 -561.18000 -643.65074  14.7%     -  110s
     0     0 -643.56325    0 8539 -561.18000 -643.56325  14.7%     -  112s
     0     0 -635.68274    0 8909 -561.18000 -635.68274  13.3%     -  146s
     0     0 -630.49008    0 9262 -561.18000 -630.49008  12.4%     -  165s
     0     0 -628.05498    0 9608 -561.18000 -628.05498  11.9%     -  181s
     0     0 -626.66479    0 9925 -561.18000 -626.66479  11.7%     -  189s
     0     0 -626.13299    0 9963 -561.18000 -626.13299  11.6%     -  196s
     0     0 -625.93439    0 10261 -561.18000 -625.93439  11.5%     -  200s
     0     0 -621.22418    0 10371 -561.18000 -621.22418  10.7%     -  217s
     0     0 -620.33198    0 10427 -561.18000 -620.33198  10.5%     -  225s
     0     0 -619.99634    0 10717 -561.18000 -619.99634  10.5%     -  229s
     0     0 -616.00584    0 11036 -561.18000 -616.00584  9.77%     -  245s
     0     0 -614.18384    0 10856 -561.18000 -614.18384  9.45%     -  252s
     0     0 -612.75189    0 11236 -561.18000 -612.75189  9.19%     -  262s
     0     0 -612.32098    0 11372 -561.18000 -612.32098  9.11%     -  268s
     0     0 -612.17830    0 11705 -561.18000 -612.17830  9.09%     -  271s
     0     0 -609.43309    0 11849 -561.18000 -609.43309  8.60%     -  285s
H    0     0                    -574.3800000 -608.21950  5.89%     -  296s
     0     0 -608.21950    0 12060 -574.38000 -608.21950  5.89%     -  296s
     0     0 -607.63392    0 12174 -574.38000 -607.63392  5.79%     -  304s
     0     0 -607.42816    0 12299 -574.38000 -607.42816  5.75%     -  308s
     0     0 -605.62669    0 12242 -574.38000 -605.62669  5.44%     -  322s
     0     0 -605.62669    0 12093 -574.38000 -605.62669  5.44%     -  323s
     0     2 -605.62667    0 12059 -574.38000 -605.62667  5.44%     -  343s
     1     4 -604.21151    1 11393 -574.38000 -605.62620  5.44%  8702  349s
     3     4 -603.96755    2 10955 -574.38000 -604.14436  5.18%  6135  367s
     7     8 -603.73085    3 10521 -574.38000 -603.95191  5.15%  7551  382s
    11    12 -603.21600    4 10067 -574.38000 -603.68599  5.10%  8872  386s
    19    19 -603.03601    5 9834 -574.38000 -603.15665  5.01%  7706  391s
    23    24 -601.17231    6 9807 -574.38000 -603.15665  5.01%  7096  397s
    33    30     cutoff    7      -574.38000 -603.15665  5.01%  6759  408s
    38    36 -588.59731    8 7692 -574.38000 -603.15665  5.01%  6810  413s
    44    43 -600.19314    8 8624 -574.38000 -603.15665  5.01%  6105  415s
    71    58 -596.22462   12 7199 -574.38000 -603.15665  5.01%  4923  420s
*  102    71              24    -574.4800000 -603.15665  4.99%  4101  424s
   109    69 -593.55504   15 6416 -574.48000 -603.15665  4.99%  3961  428s
*  114    69              28    -586.8200000 -603.15665  2.78%  3827  428s
   129    64     cutoff   15      -586.82000 -603.15665  2.78%  3695  430s
   136    61     cutoff   16      -586.82000 -603.15665  2.78%  3803  439s
   141    63 -591.40521    7 5553 -586.82000 -603.15665  2.78%  3991  446s
   163    74 -587.31970    9 5160 -586.82000 -603.15665  2.78%  3970  451s
   178    66     cutoff   10      -586.82000 -599.82662  2.22%  3870  462s
   186    64 -596.72732    5 9041 -586.82000 -596.72732  1.69%  3995  468s
   196    62 -595.66765    6 8455 -586.82000 -596.71778  1.69%  4071  472s
   210    56 -593.99373    7 8028 -586.82000 -595.81236  1.53%  4098  475s
   225    51     cutoff    8      -586.82000 -595.81236  1.53%  4101  480s
   249    44     cutoff    9      -586.82000 -595.81236  1.53%  4267  488s
   257    23 -589.26317    9 5517 -586.82000 -595.81236  1.53%  4387  493s

Cutting planes:
  Cover: 6161
  Clique: 1722
  MIR: 2346
  StrongCG: 593
  Zero half: 36
  RLT: 7
  Relax-and-lift: 2628

Explored 313 nodes (1346274 simplex iterations) in 494.48 seconds (651.56 work units)
Thread count was 8 (of 8 available processors)

Solution count 10: -586.82 -574.48 -574.38 ... -235.34
No other solutions better than -586.82

Optimal solution found (tolerance 1.00e-04)
Best objective -5.868200000000e+02, best bound -5.868200000000e+02, gap 0.0000%

User-callback calls 12368, time in user-callback 0.03 sec

julia> 

julia> MOI.get(o,MOI.ObjectiveValue())
-586.8199999999999

julia> MOI.get.(o,MOI.VariablePrimal(),x)
30-element Vector{Float64}:
 -0.0
  1.0
 -0.0
  0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
  0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
  1.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
 -0.0
  1.0
 -0.0
 -0.0
 -0.0
 -0.0


